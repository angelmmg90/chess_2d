package seas.angel.macdonald.chess2d.vista;

import seas.angel.macdonald.chess2d.controlador.Chess2dControlador;
import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import seas.angel.macdonald.chess2d.modelo.Alfil;
import seas.angel.macdonald.chess2d.modelo.Caballo;
import seas.angel.macdonald.chess2d.modelo.Celda;
import seas.angel.macdonald.chess2d.modelo.Jugador;
import seas.angel.macdonald.chess2d.modelo.Peon;
import seas.angel.macdonald.chess2d.modelo.Pieza;
import seas.angel.macdonald.chess2d.modelo.Reina;
import seas.angel.macdonald.chess2d.modelo.Rey;
import seas.angel.macdonald.chess2d.modelo.Tablero;
import seas.angel.macdonald.chess2d.modelo.Torre;

/**
 * Clase con el panel donde se cargaran los componentes.
 * 
 * @author Ángel Mac Donald Gainza
 */
public class PanelTablero extends javax.swing.JPanel {
    
    
    /**
     * Variable que guardará la fila del rey blanco en jaque
     */
    public Integer filaReyBlancoEnJaque;
    /**
     * Variable que guardará la columna del rey blanco en jaque
     */
    public Integer columnaReyBlancoEnJaque;
    /**
     * Variable que guardará la fila del rey negro en jaque
     */
    public Integer filaReyNegroEnJaque;
    /**
     * Variable que guardará la fila del rey negro en jaque
     */
    public Integer columnaReyNegroEnJaque;
    /**
     * ArrayList del Log del juego
     */
    private ArrayList<String> arrayListLog;
    public final Pantalla pantalla;
    public final Chess2dControlador acciones;
    public Jugador player1, player2;
    public static String boardUI[][];
    public static Celda arrayDeCeldas[][];
    public BufferedImage imagenAnterior;
    /**
     * Variable para guardar la celda que se ha seleccionado antes de liberar la pulsación en otra celda
     */
    public Celda celdaAnteriorSeleccionada;
    
    /**
     * Constructor del tablero que recive una pantalla (JFrame) donde se carga.
     *
     * @param pantalla Pantalla (Frame) con la partida.
     */
    public PanelTablero(Pantalla pantalla) {
        initComponents();
        this.pantalla = pantalla;
        this.acciones = new Chess2dControlador(pantalla.getPartida());
        try {
            createBoardUI(pantalla.getPartida().getJugador1(), pantalla.getPartida().getJugador2());
            pantalla.getPartida().createScreenLog(pantalla); //Creamos el Screen Log desde aquí ya que tenemos el tablero creado y podemos coger las posiciones del mismo para posicionar el frame del Log
            //Actualizamos el log
            updateLog("---Componentes cargados...");
        } catch (IOException ex) {
            Logger.getLogger(PanelTablero.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setLayout(new java.awt.GridLayout(Tablero.ROWS, Tablero.COLS, Tablero.GAP, Tablero.GAP));
    }// </editor-fold>                        
    // Variables declaration - do not modify                     
    // End of variables declaration
    
    /**
     * Método que se encargará de cargar la imagen que se le pase en el botón indicado
     * 
     * @param btnCelda JButton en donde se cargará la imagen
     * @param image BufferedImage que se cargará en el botón indicado
     */
    public void setImageOfPieceOnButton (JButton btnCelda, BufferedImage image){
        
        if (image == null){
            btnCelda.setIcon(null);
        }else{
            Image scaled = image.getScaledInstance(50,50,java.awt.Image.SCALE_SMOOTH);
            btnCelda.setIcon(new ImageIcon(scaled));
        }
    }
    /**
     * Método que se encargará de crear un tablero nuevo con las fichas en sus posiciones inciales, o bien si se hubiese guardado
     * una partida previamente también se encargará de cargar la misma
     * 
     * @param playerOne Jugador
     * @param playerTwo Jugador
     * @throws IOException A causa del BufferedImage image
     */
    public void createBoardUI(Jugador playerOne, Jugador playerTwo) throws IOException{  
        
       boardUI = pantalla.getPartida().getTablero().getBoardUI();
       arrayDeCeldas = pantalla.getPartida().getTablero().getCeldas();
       
       ArrayList<Pieza> piezasASeleccionar; //Almacenaremos los datos de las piezas que el usuario puede seleccionar cuando lleve un peón al extremo del tablero
       
       player1 = playerOne;
       player2 = playerTwo;
       boolean noHayCarga = false;
       Integer[] idPiezas = new Integer[32];
       int idContador = 0;
       boolean nuevoIdParaPieza;
       BufferedImage image;
       int contadorFilas = 0;
       int contadorColumnas = 0;
       
        
      
        //Si hay una partida guardada y el usuario ha pulsado el botón cargar la recuperamos
        for (int i = 0; i < Tablero.ROWS; i++) {
             for (int j = 0; j < Tablero.COLS; j++) {
               if(arrayDeCeldas[i][j]!=null){ //Comprobamos si se han cargado las celdas
                   this.add(arrayDeCeldas[i][j]);
                   //Si no estamos ante una celda vacía entramos en la condición
                    if (boardUI[i][j].equals("0")){
                        arrayDeCeldas[i][j].addListeners(pantalla, this, true, player1, player2);
                    }else{
                        arrayDeCeldas[i][j].addListeners(pantalla, this, false, player1, player2);
                    }
               }else{
                   noHayCarga = true;
                   j=Tablero.COLS;
                   i=Tablero.ROWS;
               }
                 
             }
        }
             
        if(noHayCarga == false){
            
            try {
                System.out.println("\n\n\nTABLERO CARGADO EN PANELTABLERO \n\n\n!!");
                String str = "|\t";
                for (int i = 0; i < 8; i++) {
                    for (int j = 0; j < 8; j++) {
                        str += boardUI[i][j] + "\t";;
                    }
                    System.out.println(str + "|");
                    str = "|\t";
                }
            } catch (Exception e) {
                System.out.println("Tablero vacío!!");
            }
        }
           
       if(noHayCarga){
           //Rellenamos el tablero con las fichas en sus lugares correpondientes
            for (int i = 0; i < Tablero.ROWS; i++) {
                contadorFilas++;
                for (int j = 0; j < Tablero.COLS; j++) {
                    contadorColumnas++;

                    Celda celda = new Celda();  
                    //JButton btnCelda = new JButton();


                    arrayDeCeldas[i][j] = celda;

                    //Celdas peón
                    if(i==1 || i==6){



                        //Asignamos las fichas a sus jugadores correspondientes, poniendo el prefijo
                        //1 --> si es el jugador 1º y 2 si es el 2º
                        if (i==6){
                            Peon peon = new Peon();
                            boardUI[i][j]="11";
                            for (int k = 0; k < idPiezas.length; k++) {
                                if(idPiezas[0]!= null){
                                    if(idContador==idPiezas[k]){
                                        nuevoIdParaPieza = true;
                                        k = idPiezas.length;
                                    }else{
                                        nuevoIdParaPieza = false;
                                    }
                                }else{
                                    nuevoIdParaPieza = true;
                                }   

                                if (nuevoIdParaPieza){
                                    idContador ++;
                                    peon.setIdPieza(idContador);
                                }else{
                                    peon.setIdPieza(idContador);
                                }
                            }

                            peon.setPosEnFilasTablero(i);
                            peon.setPosEnColumnasTablero(j);
                            peon.setTipoPieza(11);
                            peon.setBandoPieza(1);
                            peon.setName("Peón");
                            peon.setEstaMuerta(false);
                            peon.setMovePiece(true);

                            peon.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_pawn.png");


                            celda.setPieza(peon);
                            celda.setPosEnFilasTablero(i);
                            celda.setPosEnColumnasTablero(j);
                            image = ImageIO.read(new File(peon.getRutaImagen()));
                            arrayDeCeldas[i][j].setImage(image);
                            setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);
                            
                            
                            peon.setCeldaOrigen(celda);
                        }else{

                            Peon peon = new Peon();
                            boardUI[i][j]="21";
                            for (int k = 0; k < idPiezas.length; k++) {
                                if(idPiezas[0]!= null){
                                    if(idContador==idPiezas[k]){
                                        nuevoIdParaPieza = true;
                                        k = idPiezas.length;
                                    }else{
                                        nuevoIdParaPieza = false;
                                    }
                                }else{
                                    nuevoIdParaPieza = true;
                                }   

                                if (nuevoIdParaPieza){
                                    idContador ++;
                                    peon.setIdPieza(idContador);
                                }else{
                                    peon.setIdPieza(idContador);
                                }
                            }


                            peon.setPosEnFilasTablero(i);
                            peon.setPosEnColumnasTablero(j);
                            peon.setTipoPieza(21);
                            peon.setBandoPieza(2);
                            peon.setName("Peón"); 
                            peon.setMovePiece(true);

                            peon.setMvtoEnFilas(1);
                            peon.setMvtoEnColumnas(0);

                            peon.setEstaMuerta(false);

                            peon.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_pawn.png");

                            celda.setPieza(peon);
                            celda.setPosEnFilasTablero(i);
                            celda.setPosEnColumnasTablero(j);
                            image = ImageIO.read(new File(peon.getRutaImagen()));
                            arrayDeCeldas[i][j].setImage(image);
                            setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                            peon.setCeldaOrigen(celda);
                        }

                    }else{

                        if(i==0 || i==7){
                            //Asignamos las fichas a sus jugadores correspondientes, poniendo el prefijo
                            //1 --> si es el jugador 1º y 2 si es el 2º
                            if(i==6 || i==7){
                                //Celdas Torre
                                if(j==0 || j==7){
                                    Torre torre = new Torre();
                                    boardUI[i][j]="12";

                                    for (int k = 0; k < idPiezas.length; k++) {
                                        if(idPiezas[0]!= null){
                                            if(idContador==idPiezas[k]){
                                                nuevoIdParaPieza = true;
                                                k = idPiezas.length;
                                            }else{
                                                nuevoIdParaPieza = false;
                                            }
                                        }else{
                                            nuevoIdParaPieza = true;
                                        }   

                                        if (nuevoIdParaPieza){
                                            idContador ++;
                                            torre.setIdPieza(idContador);
                                        }else{
                                            torre.setIdPieza(idContador);
                                        }
                                    }


                                    torre.setPosEnFilasTablero(i);
                                    torre.setPosEnColumnasTablero(j);
                                    torre.setTipoPieza(12);
                                    torre.setBandoPieza(1);
                                    torre.setName("Torre");
                                    torre.setEstaMuerta(false);
                                    torre.setMovePiece(true);

                                    torre.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_rook.png");

                                    celda.setPieza(torre);
                                    celda.setPosEnFilasTablero(i);
                                    celda.setPosEnColumnasTablero(j);
                                    image = ImageIO.read(new File(torre.getRutaImagen()));
                                    arrayDeCeldas[i][j].setImage(image);
                                    setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                    torre.setCeldaOrigen(celda);
                                    
                                    //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                    piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                    piezasASeleccionar.add(torre);
                                    pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                }
                                //Celdas Caballo
                                if(j==1 || j==6){
                                    Caballo caballo = new Caballo();
                                    boardUI[i][j]="13";

                                    for (int k = 0; k < idPiezas.length; k++) {
                                        if(idPiezas[0]!= null){
                                            if(idContador==idPiezas[k]){
                                                nuevoIdParaPieza = true;
                                                k = idPiezas.length;
                                            }else{
                                                nuevoIdParaPieza = false;
                                            }
                                        }else{
                                            nuevoIdParaPieza = true;
                                        }   

                                        if (nuevoIdParaPieza){
                                            idContador ++;
                                            caballo.setIdPieza(idContador);
                                        }else{
                                            caballo.setIdPieza(idContador);
                                        }
                                    }


                                    caballo.setPosEnFilasTablero(i);
                                    caballo.setPosEnColumnasTablero(j);
                                    caballo.setTipoPieza(13);
                                    caballo.setBandoPieza(1);
                                    caballo.setName("Caballo");
                                    caballo.setEstaMuerta(false);
                                    caballo.setMovePiece(true);

                                    caballo.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_knight.png");

                                    celda.setPieza(caballo);
                                    celda.setPosEnFilasTablero(i);
                                    celda.setPosEnColumnasTablero(j);
                                    image = ImageIO.read(new File(caballo.getRutaImagen()));
                                    arrayDeCeldas[i][j].setImage(image);
                                    setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                    caballo.setCeldaOrigen(celda);
                                    
                                    //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                    piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                    piezasASeleccionar.add(caballo);
                                    pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                    
                                }
                                //Celdas Alfil
                                if(j==2 || j==5){
                                    Alfil alfil = new Alfil();
                                    boardUI[i][j]="14";

                                    for (int k = 0; k < idPiezas.length; k++) {
                                        if(idPiezas[0]!= null){
                                            if(idContador==idPiezas[k]){
                                                nuevoIdParaPieza = true;
                                                k = idPiezas.length;
                                            }else{
                                                nuevoIdParaPieza = false;
                                            }
                                        }else{
                                            nuevoIdParaPieza = true;
                                        }   

                                        if (nuevoIdParaPieza){
                                            idContador ++;
                                            alfil.setIdPieza(idContador);
                                        }else{
                                            alfil.setIdPieza(idContador);
                                        }
                                    }


                                    alfil.setPosEnFilasTablero(i);
                                    alfil.setPosEnColumnasTablero(j);
                                    alfil.setTipoPieza(14);
                                    alfil.setBandoPieza(1);
                                    alfil.setName("Alfil");
                                    alfil.setEstaMuerta(false);
                                    alfil.setMovePiece(true);

                                    alfil.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_bishop.png");

                                    celda.setPieza(alfil);
                                    celda.setPosEnFilasTablero(i);
                                    celda.setPosEnColumnasTablero(j);
                                    image = ImageIO.read(new File(alfil.getRutaImagen()));
                                    arrayDeCeldas[i][j].setImage(image);
                                    setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                    alfil.setCeldaOrigen(celda);
                                    
                                    //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                    piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                    piezasASeleccionar.add(alfil);
                                    pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                }
                                //Celda Reina
                                if(j==3){
                                    Reina reina = new Reina();
                                    boardUI[i][j]="15";

                                    for (int k = 0; k < idPiezas.length; k++) {
                                        if(idPiezas[0]!= null){
                                            if(idContador==idPiezas[k]){
                                                nuevoIdParaPieza = true;
                                                k = idPiezas.length;
                                            }else{
                                                nuevoIdParaPieza = false;
                                            }
                                        }else{
                                            nuevoIdParaPieza = true;
                                        }   

                                        if (nuevoIdParaPieza){
                                            idContador ++;
                                            reina.setIdPieza(idContador);
                                        }else{
                                            reina.setIdPieza(idContador);
                                        }
                                    }


                                    reina.setPosEnFilasTablero(i);
                                    reina.setPosEnColumnasTablero(j);
                                    reina.setTipoPieza(15);
                                    reina.setBandoPieza(1);
                                    reina.setName("Reina");
                                    reina.setEstaMuerta(false);
                                    reina.setMovePiece(true);

                                    reina.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_queen.png");

                                    celda.setPieza(reina);
                                    celda.setPosEnFilasTablero(i);
                                    celda.setPosEnColumnasTablero(j);
                                    image = ImageIO.read(new File(reina.getRutaImagen()));
                                    arrayDeCeldas[i][j].setImage(image);
                                    setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                    reina.setCeldaOrigen(celda);
                                    
                                    //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                    piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                    piezasASeleccionar.add(reina);
                                    pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                }
                                //Celda Rey
                                if(j==4){
                                    Rey rey = new Rey();
                                    boardUI[i][j]="16";

                                    for (int k = 0; k < idPiezas.length; k++) {
                                        if(idPiezas[0]!= null){
                                            if(idContador==idPiezas[k]){
                                                nuevoIdParaPieza = true;
                                                k = idPiezas.length;
                                            }else{
                                                nuevoIdParaPieza = false;
                                            }
                                        }else{
                                            nuevoIdParaPieza = true;
                                        }   

                                        if (nuevoIdParaPieza){
                                            idContador ++;
                                            rey.setIdPieza(idContador);
                                        }else{
                                            rey.setIdPieza(idContador);
                                        }
                                    }



                                    rey.setPosEnFilasTablero(i);
                                    rey.setPosEnColumnasTablero(j);
                                    rey.setTipoPieza(16);
                                    rey.setBandoPieza(1);
                                    rey.setName("Rey");
                                    rey.setEstaMuerta(false);
                                    rey.setMovePiece(true);

                                    rey.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/white_king.png");

                                    celda.setPieza(rey);
                                    celda.setPosEnFilasTablero(i);
                                    celda.setPosEnColumnasTablero(j);
                                    image = ImageIO.read(new File(rey.getRutaImagen()));
                                    arrayDeCeldas[i][j].setImage(image);
                                    setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                    rey.setCeldaOrigen(celda);
                                }
                            }else{
                                if(i==0 || i==1){
                                    //Celdas Torre
                                    if(j==0 || j==7){
                                        Torre torre = new Torre();
                                        boardUI[i][j]="22";

                                        for (int k = 0; k < idPiezas.length; k++) {
                                            if(idPiezas[0]!= null){
                                                if(idContador==idPiezas[k]){
                                                    nuevoIdParaPieza = true;
                                                    k = idPiezas.length;
                                                }else{
                                                    nuevoIdParaPieza = false;
                                                }
                                            }else{
                                                nuevoIdParaPieza = true;
                                            }   

                                            if (nuevoIdParaPieza){
                                                idContador ++;
                                                torre.setIdPieza(idContador);
                                            }else{
                                                torre.setIdPieza(idContador);
                                            }
                                        }


                                        torre.setPosEnFilasTablero(i);
                                        torre.setPosEnColumnasTablero(j);
                                        torre.setTipoPieza(22);
                                        torre.setBandoPieza(2);
                                        torre.setName("Torre");
                                        torre.setEstaMuerta(false);
                                        torre.setMovePiece(true);

                                        torre.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_rook.png");

                                        celda.setPieza(torre);
                                        celda.setPosEnFilasTablero(i);
                                        celda.setPosEnColumnasTablero(j);
                                        image = ImageIO.read(new File(torre.getRutaImagen()));
                                        arrayDeCeldas[i][j].setImage(image);
                                        setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                        torre.setCeldaOrigen(celda);
                                        
                                        //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                        piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                        piezasASeleccionar.add(torre);
                                        pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                    }
                                    //Celdas Caballo
                                    if(j==1 || j==6){
                                        Caballo caballo = new Caballo();
                                        boardUI[i][j]="23";

                                        for (int k = 0; k < idPiezas.length; k++) {
                                            if(idPiezas[0]!= null){
                                                if(idContador==idPiezas[k]){
                                                    nuevoIdParaPieza = true;
                                                    k = idPiezas.length;
                                                }else{
                                                    nuevoIdParaPieza = false;
                                                }
                                            }else{
                                                nuevoIdParaPieza = true;
                                            }   

                                            if (nuevoIdParaPieza){
                                                idContador ++;
                                                caballo.setIdPieza(idContador);
                                            }else{
                                                caballo.setIdPieza(idContador);
                                            }
                                        }


                                        caballo.setPosEnFilasTablero(i);
                                        caballo.setPosEnColumnasTablero(j);
                                        caballo.setTipoPieza(23);
                                        caballo.setBandoPieza(2);
                                        caballo.setName("Caballo");
                                        caballo.setEstaMuerta(false);
                                        caballo.setMovePiece(true);

                                        caballo.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_knight.png");

                                        celda.setPieza(caballo);
                                        celda.setPosEnFilasTablero(i);
                                        celda.setPosEnColumnasTablero(j);
                                        image = ImageIO.read(new File(caballo.getRutaImagen()));
                                        arrayDeCeldas[i][j].setImage(image);
                                        setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                        caballo.setCeldaOrigen(celda);
                                        
                                        //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                        piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                        piezasASeleccionar.add(caballo);
                                        pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                    }
                                    //Celdas Alfil
                                    if(j==2 || j==5){
                                        Alfil alfil = new Alfil();
                                        boardUI[i][j]="24";

                                        for (int k = 0; k < idPiezas.length; k++) {
                                            if(idPiezas[0]!= null){
                                                if(idContador==idPiezas[k]){
                                                    nuevoIdParaPieza = true;
                                                    k = idPiezas.length;
                                                }else{
                                                    nuevoIdParaPieza = false;
                                                }
                                            }else{
                                                nuevoIdParaPieza = true;
                                            }   

                                            if (nuevoIdParaPieza){
                                                idContador ++;
                                                alfil.setIdPieza(idContador);
                                            }else{
                                                alfil.setIdPieza(idContador);
                                            }
                                        }



                                        alfil.setPosEnFilasTablero(i);
                                        alfil.setPosEnColumnasTablero(j);
                                        alfil.setTipoPieza(24);
                                        alfil.setBandoPieza(2);
                                        alfil.setName("Alfil");
                                        alfil.setEstaMuerta(false);
                                        alfil.setMovePiece(true);

                                        alfil.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_bishop.png");

                                        celda.setPieza(alfil);
                                        celda.setPosEnFilasTablero(i);
                                        celda.setPosEnColumnasTablero(j);
                                        image = ImageIO.read(new File(alfil.getRutaImagen()));
                                        arrayDeCeldas[i][j].setImage(image);
                                        setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                        alfil.setCeldaOrigen(celda);
                                        
                                        //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                        piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                        piezasASeleccionar.add(alfil);
                                        pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                    }
                                    //Celda Reina
                                    if(j==3){
                                        Reina reina = new Reina();
                                        boardUI[i][j]="25";

                                        for (int k = 0; k < idPiezas.length; k++) {
                                            if(idPiezas[0]!= null){
                                                if(idContador==idPiezas[k]){
                                                    nuevoIdParaPieza = true;
                                                    k = idPiezas.length;
                                                }else{
                                                    nuevoIdParaPieza = false;
                                                }
                                            }else{
                                                nuevoIdParaPieza = true;
                                            }   

                                            if (nuevoIdParaPieza){
                                                idContador ++;
                                                reina.setIdPieza(idContador);
                                            }else{
                                                reina.setIdPieza(idContador);
                                            }
                                        }


                                        reina.setPosEnFilasTablero(i);
                                        reina.setPosEnColumnasTablero(j);
                                        reina.setTipoPieza(25);
                                        reina.setBandoPieza(2);
                                        reina.setName("Reina");
                                        reina.setEstaMuerta(false);
                                        reina.setMovePiece(true);

                                        reina.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_queen.png");

                                        celda.setPieza(reina);
                                        celda.setPosEnFilasTablero(i);
                                        celda.setPosEnColumnasTablero(j);
                                        image = ImageIO.read(new File(reina.getRutaImagen()));
                                        arrayDeCeldas[i][j].setImage(image);
                                        setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                        reina.setCeldaOrigen(celda);
                                        
                                        //Asignamos la pieza al arrayList de piezas a seleccionar cuando el usuario lleve el peón al extremo del tablero
                                        piezasASeleccionar = pantalla.getPartida().getTablero().getArraySelectorPiezas();
                                        piezasASeleccionar.add(reina);
                                        pantalla.getPartida().getTablero().setArraySelectorPiezas(piezasASeleccionar);
                                    }
                                    //Celda Rey
                                    if(j==4){
                                        Rey rey = new Rey();
                                        boardUI[i][j]="26";

                                        for (int k = 0; k < idPiezas.length; k++) {
                                            if(idPiezas[0]!= null){
                                                if(idContador==idPiezas[k]){
                                                    nuevoIdParaPieza = true;
                                                    k = idPiezas.length;
                                                }else{
                                                    nuevoIdParaPieza = false;
                                                }
                                            }else{
                                                nuevoIdParaPieza = true;
                                            }   

                                            if (nuevoIdParaPieza){
                                                idContador ++;
                                                rey.setIdPieza(idContador);
                                            }else{
                                                rey.setIdPieza(idContador);
                                            }
                                        }


                                        rey.setPosEnFilasTablero(i);
                                        rey.setPosEnColumnasTablero(j);
                                        rey.setTipoPieza(26);
                                        rey.setBandoPieza(2);
                                        rey.setName("Rey");
                                        rey.setEstaMuerta(false);
                                        rey.setMovePiece(true);

                                        rey.setRutaImagen("src/seas/angel/macdonald/chess2d/recursos/black_king.png");

                                        celda.setPieza(rey);
                                        celda.setPosEnFilasTablero(i);
                                        celda.setPosEnColumnasTablero(j);
                                        image = ImageIO.read(new File(rey.getRutaImagen()));
                                        arrayDeCeldas[i][j].setImage(image);
                                        setImageOfPieceOnButton(arrayDeCeldas[i][j].getCelda(), image);

                                        rey.setCeldaOrigen(celda);
                                    }

                                }

                            }


                        }
                        //Celdas Vacías
                        if(boardUI[i][j] == null){
                            boardUI[i][j]="0"; 
                            celda.setPosEnFilasTablero(i);                        
                            celda.setPosEnColumnasTablero(j);
                            celda.setCellIsEmpty(true);

                        }

                    }


                    //Si no estamos ante una celda vacía entramos en la condición
                    if (boardUI[i][j].equals("0")){
                        celda.addListeners(pantalla, this, true, player1, player2);
                    }else{
                        celda.addListeners(pantalla, this, false, player1, player2);
                    }




                    //PINTAR FONDOS DE LAS CELDAS
                    //Si la fila es par
                   if(contadorFilas%2==0){
                       for (int k = 0; k < 8; k++) {
                           //Si la columna es par
                           if(contadorColumnas%2==0){



                               arrayDeCeldas[i][j].setBackground(Color.WHITE);
                               arrayDeCeldas[i][j].setBorder(BorderFactory.createEmptyBorder());
                               arrayDeCeldas[i][j].setFocusPainted(false);



                           }else{

                               //Si la columna es impar
                               arrayDeCeldas[i][j].setBackground(Color.ORANGE);
                               arrayDeCeldas[i][j].setBorder(BorderFactory.createEmptyBorder());
                               arrayDeCeldas[i][j].setFocusPainted(false);

                           }
                       }
                   }else{
                       for (int k = 0; k < 8; k++) {
                           //Si la columna es par
                           if(contadorColumnas%2==0){                            
                               arrayDeCeldas[i][j].setBackground(Color.ORANGE);
                               arrayDeCeldas[i][j].setBorder(BorderFactory.createEmptyBorder());
                               arrayDeCeldas[i][j].setFocusPainted(false);


                           }else{
                               //Si la columna es impar

                               arrayDeCeldas[i][j].setBackground(Color.WHITE);
                               arrayDeCeldas[i][j].setBorder(BorderFactory.createEmptyBorder());
                               arrayDeCeldas[i][j].setFocusPainted(false);


                           }
                       }
                   }


                this.add(arrayDeCeldas[i][j]);

                }
            }

            


            //Frame Principal
            pantalla.pack();
            //pantalla.setLocationByPlatform(true);

            pantalla.add(this);
            pantalla.setVisible(true);
            pantalla.setSize(600,600);
            pantalla.setResizable(false);
            //frameBoard.setUndecorated(true);
            pantalla.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            pantalla.setLocationRelativeTo(null);
            
            
            
            
            
           
        
        
       }
    }
    /**
     * Método que actualiza el gameLog(ArrayList) de la Partida
     * 
     * @param log String - Nueva línea para añadir al log
     */
    public void updateLog(String log){
        arrayListLog = pantalla.getPartida().getGameLog();
        arrayListLog.add(log);
        pantalla.getPartida().setGameLog(arrayListLog);
        pantalla.getPartida().cargarLog(arrayListLog);
        
    }
    /**
     * Método que refresca el tablero después de hacer un mvto
     * 
     * @param celdaDestino Celda 
     * @throws IOException A causa de la imagenAnterior de la celdaAnteriorSeleccionada
     */
    public void reloadBoardUI(Celda celdaDestino) throws IOException{
        //Sacamos la imagen de la ruta que tenemos de la celda anterior que se ha seleccionado
        imagenAnterior = ImageIO.read(new File(celdaAnteriorSeleccionada.getRutaImagenCelda()));
        
        
        
        //Colocamos la imagen de la celda anterior en la nueva celda seleccionada
        setImageOfPieceOnButton(celdaDestino, imagenAnterior);
        //Colocamos la pieza de la celda anterior en la nueva celda seleccionada
        celdaDestino.setPieza(celdaAnteriorSeleccionada.getPieza());
        
        //Establecemos la nueva posición de la ficha
        celdaDestino.getPieza().setPosEnFilasTablero(celdaDestino.getPosEnFilasTablero());
        celdaDestino.getPieza().setPosEnColumnasTablero(celdaDestino.getPosEnColumnasTablero());
        
        /*System.out.println("\n INICIO");
        System.out.println("Posición fila celda selección anterior " + celdaAnteriorSeleccionada.getPosEnFilasTablero());
        System.out.println("Posición columna celda selección anterior " + celdaAnteriorSeleccionada.getPosEnColumnasTablero());*/
        
        // Actualizamos las posiciones del tablero lógico
        boardUI[celdaAnteriorSeleccionada.getPosEnFilasTablero()]
               [celdaAnteriorSeleccionada.getPosEnColumnasTablero()]
                = "0";
        // Modificamos listeners - celdaAnteriorSeleccionada
        celdaAnteriorSeleccionada.addListeners(pantalla, this, true, player1, player2);
        
        //Si no estamos ante una celda vacía entramos en la condición
                /*if (boardUI[i][j].equals("0")){
                    celda.addListeners(frameBoard, this, true);
                }else{
                    celda.addListeners(frameBoard, this, false);
                }*/
                
        boardUI[celdaDestino.getPosEnFilasTablero()]
               [celdaDestino.getPosEnColumnasTablero()]
                = celdaAnteriorSeleccionada.getPieza().getTipoPieza().toString();  
        // Modificamos listeners - celdaDestino
        celdaDestino.addListeners(pantalla, this, false, player1, player2);
        //Quitamos la imagen en la celda que se ha seleccionado anteriormente
        setImageOfPieceOnButton(celdaAnteriorSeleccionada, null);
        //Limpiamos la celda anterior seleccionada
        celdaAnteriorSeleccionada.clearCell();
        
        
        /*System.out.println("Posición fila celda selección anterior " + celdaAnteriorSeleccionada.getPosEnFilasTablero());
        System.out.println("Posición columna celda selección anterior " + celdaAnteriorSeleccionada.getPosEnColumnasTablero());
        System.out.println("FIN");*/
        
        
        
        //Mostramos el tablero lógico por pantalla output
        //Se puede elminar más adelante
        try {
            String str = "|\t";
            for (int i = 0; i < 8; i++) {
                for (int j = 0; j < 8; j++) {
                    str += boardUI[i][j] + "\t";;
                }
                System.out.println(str + "|");
                str = "|\t";
            }
        } catch (Exception e) {
            System.out.println("Tablero vacío!!");
        }
        //
        /*// Actualizamos las posiciones del tablero
        boardUI[celdaAnteriorSeleccionada.getPieza().getPosEnFilasTablero()][celdaAnteriorSeleccionada.getPieza().getPosEnColumnasTablero()]= "0";  
        boardUI[getPieza().getPosEnFilasTablero()]
                       [piezaEnMvto.getPieza().getPosEnColumnasTablero()]
                        = getPieza().getTipoPieza().toString();*/
        //setCursor(Cursor.getDefaultCursor());
        Rey rey;
        //Comprobamos si el rey del enemigo está en Jaque una vez realizado el mvto.
        if(celdaDestino.getPieza().getBandoPieza()==1){ //BLANCAS
            //Comprobamos si el rey del bando de las NEGRAS está en Jaque
            
            for (int fila = 0; fila < 8; fila++) {
                for (int columna = 0; columna < 8; columna++) {
                    if(this.arrayDeCeldas[fila][columna].getPieza()!=null){
                        if("Rey".equals(this.arrayDeCeldas[fila][columna].getPieza().getName()) &&
                                this.arrayDeCeldas[fila][columna].getPieza().getBandoPieza()==2){
                            rey = (Rey)this.arrayDeCeldas[fila][columna].getPieza();
                            //Recalculamos los possibles mvtos siguientes y habilitamos la movilidad de las piezas
                            calculatePossibleMoves(this.pantalla.getPartida().getTablero());
                            if(rey.checkJaque(this, rey.getPosEnFilasTablero(), rey.getPosEnColumnasTablero(), true)){
                                
                                
                                
                                //Guardamos la posición actual del rey NEGRO
                                filaReyNegroEnJaque = fila;
                                columnaReyNegroEnJaque = columna;
                                
                                
                                if(rey.checkJaqueMate(this, rey)){
                                    //Finaliza la partida
                                    pantalla.getPartida().setGameOver(true);
                                    //Actualizamos el Log
                                    if(player1.getTurnoJugador()){
                                        updateLog("---El Rey de las Negras está en Jaque Mate");
                                        updateLog(player1.getName() +"(Blancas) GANA LA PARTIDA");
                                        
                                    }else{
                                        updateLog("---El Rey de las Blancas está en Jaque Mate");
                                        updateLog(player2.getName() +"(Negras) GANA LA PARTIDA");

                                    }
                                    JOptionPane.showMessageDialog(null, "Rey Negro en Jaque Mate.");
                                }else{
                                    //Actualizamos el Log
                                    if(player1.getTurnoJugador()){
                                        updateLog("---El Rey de las Negras está en Jaque ");
                                    }else{
                                        updateLog("---El Rey de las Blancas está en Jaque ");

                                    }
                                    
                                    //Reseteamos la lista de piezas amenazadoras para evitar duplicidad de las mismas
                                    rey.borrarPiezasAmenazadoras();
                                    JOptionPane.showMessageDialog(null, "Rey Negro en Jaque.");
                                }
                                
                            }
                        }
                    }
                }
            }
            
        }else if(celdaDestino.getPieza().getBandoPieza()==2){ //NEGRAS
            //Comprobamos si el rey del bando de las BLANCAS está en Jaque
            
            for (int fila = 0; fila < 8; fila++) {
                for (int columna = 0; columna < 8; columna++) {
                    if(this.arrayDeCeldas[fila][columna].getPieza()!=null){
                        if("Rey".equals(this.arrayDeCeldas[fila][columna].getPieza().getName()) &&
                                this.arrayDeCeldas[fila][columna].getPieza().getBandoPieza()==1){
                            rey = (Rey)this.arrayDeCeldas[fila][columna].getPieza();
                            //Recalculamos los possibles mvtos siguientes
                            calculatePossibleMoves(this.pantalla.getPartida().getTablero());
                            if(rey.checkJaque(this, rey.getPosEnFilasTablero(), rey.getPosEnColumnasTablero(), true)){
                                
                                //Guardamos la posición actual del rey BLANCO
                                filaReyBlancoEnJaque = fila;
                                columnaReyBlancoEnJaque = columna;
                                
                                if(rey.checkJaqueMate(this, rey)){
                                    //Finaliza la partida
                                    pantalla.getPartida().setGameOver(true);
                                    //Actualizamos el Log
                                    if(player1.getTurnoJugador()){
                                        updateLog("---El Rey de las Negras está en Jaque Mate");
                                        updateLog(player1.getName() +"(Blancas) GANA LA PARTIDA" );
                                        
                                    }else{
                                        updateLog("---El Rey de las Blancas está en Jaque Mate");
                                        updateLog(player2.getName() +"(Negras) GANA LA PARTIDA" );

                                    }
                                    JOptionPane.showMessageDialog(null, "Rey Blanco en Jaque Mate.");
                                }else{
                                    //Actualizamos el Log
                                    if(player1.getTurnoJugador()){
                                        updateLog("---El Rey de las Negras está en Jaque ");
                                    }else{
                                        updateLog("---El Rey de las Blancas está en Jaque ");

                                    }
                                    //Reseteamos la lista de piezas amenazadoras para evitar duplicidad de las mismas
                                    rey.borrarPiezasAmenazadoras();
                                    JOptionPane.showMessageDialog(null, "Rey Blanco en Jaque.");
                                }
                            }
                        }
                    }
                }
            }
        }
        
    }
    /**
     * Recalculamos todos los posibles movimientos siguientes de las piezas y habilitamos la capacidad de mover las mismas
     * 
     * @param tablero Tablero 
     */
    public void calculatePossibleMoves (Tablero tablero){
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if(arrayDeCeldas[i][j].getPieza()!=null){
                    //Habilitamos la movilidad de las piezas
                    //if(tablero.arrayDeCeldas[i][j].getPieza().getMovePiece()==false){
                        arrayDeCeldas[i][j].getPieza().setMovePiece(true);
                    //}
                    
                    arrayDeCeldas[i][j].getPieza().checkPossiblesMovesAndStoreThem(this, arrayDeCeldas[i][j].getPieza());
                }

            }
        }
    }
}
